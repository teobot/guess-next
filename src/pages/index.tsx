// next imports
import Head from "next/head";
import { useRouter } from "next/router";

// font
import { Inter } from "next/font/google";

// interface
import LevelDataClass from "@/common/interfaces/LevelDataClass";

// swr
import useSWR from "swr";
import { fetcher } from "@/common/lib/fetcher";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const router = useRouter();
  const levels = useSWR("/api/get_all_levels", fetcher);
  const playlists = useSWR("/api/get_all_playlists", fetcher);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`container mx-auto ${inter.className}`}>
        <br />
        <div className="flex flex-col divide-y">
          {playlists.data === undefined && <div>Loading...</div>}

          {!playlists.isLoading &&
            playlists.data !== undefined &&
            playlists.data?.map(
              (playList: {
                id: string;
                title: string;
                levels: { id: string; title: string }[];
              }) => {
                return (
                  <div
                    key={playList.id}
                    className="bg-blue-900 p-5 cursor-pointer hover:bg-blue-800 transition-colors"
                    onClick={() => {
                      router.push(
                        `/level/${playList.levels[0].id}?playlist=${playList.id}`
                      );
                    }}
                  >
                    <h1 className="font-bold text-2xl underline">
                      {playList.title}
                    </h1>
                    <div>
                      {playList.levels.map((level) => {
                        return (
                          <div key={level.id}>
                            <h2>{level.title}</h2>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                );
              }
            )}
        </div>

        <br />
        <br />

        <div className="flex flex-col divide-y">
          {levels.data === undefined && <div>Loading...</div>}

          {!levels.isLoading &&
            levels.data !== undefined &&
            levels.data?.map((level: { id: string; title: string }) => {
              return (
                <div
                  key={level.id}
                  className="bg-blue-900 p-5 cursor-pointer hover:bg-blue-800 transition-colors"
                  onClick={() => {
                    router.push(`/level/${level.id}`);
                  }}
                >
                  <h1>{level.title}</h1>
                </div>
              );
            })}
        </div>
      </main>
    </>
  );
}
