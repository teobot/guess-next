import { useState, useEffect, createRef } from "react";

import Head from "next/head";

import ReactPlayer, { YouTubeConfig } from "react-player/youtube";

interface LevelDataClass {
  id: number;
  title: string;
  clipId: string;
  startAt: number;
  stopAt: number;
  continueFor: number;
  choices: {
    id: number;
    text: string;
  }[];
  answer: number;
}

export default function Home({ levelData }: { levelData: LevelDataClass }) {
  const [domLoaded, setDomLoaded] = useState(false);
  const playerRef = createRef<ReactPlayer>();
  const [state, setState] = useState({
    url: `https://www.youtube.com/watch?v=${levelData.clipId}`,
    pip: false,
    playing: false,
    controls: false,
    light: false,
    volume: 0.8,
    muted: false,
    played: 0,
    loaded: 0,
    duration: 0,
    playbackRate: 1.0,
    finished: false,
    hitStopAt: false,
    hasShownAfterChoice: false,
  });

  const youtubeConfig: YouTubeConfig = {
    playerVars: {
      autohide: 0,
      showinfo: 0,
      controls: 0,
      modestbranding: 1,
      rel: 0,
      disablekb: 1,
      iv_load_policy: 3,
      start: levelData.startAt,
      cc_load_policy: 0,
      fs: 0,
      playsinline: 1,
      enablejsapi: 1,
      origin: "http://localhost:3000",
      widgetId: 1,
    },
    embedOptions: {
      autoplay: 0,
    },
    onUnstarted: () => {
      console.log("onUnstarted");
    },
  };

  useEffect(() => {
    setDomLoaded(true);
  }, []);

  const handlePlay = () => {
    console.log("onPlay");
    setState({ ...state, playing: true });
  };

  const handlePause = () => {
    console.log("onPause");
    setState({ ...state, playing: false });
  };

  const handleEnded = () => {
    console.log("onEnd");
    setState({ ...state, finished: true });
  };

  const handleProgress = (v_state: any) => {
    console.log("onProgress", v_state);
    if (v_state.playedSeconds >= levelData.stopAt) {
      if (!state.hitStopAt) {
        console.log("onPause");
        setState({ ...state, playing: false, hitStopAt: true });
      } else {
        if (v_state.playedSeconds >= levelData.stopAt + levelData.continueFor) {
          // its hit the stop at and the continue to time
          console.log("showAnswer");
          setState({
            ...state,
            playing: false,
            finished: true,
            hasShownAfterChoice: true,
          });
        }
      }
    }
  };

  const handleDuration = (duration: any) => {
    console.log("onDuration", duration);
    setState({ ...state, duration });
  };

  const handlePlayPause = () => {
    setState({ ...state, playing: !state.playing });
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        style={{
          backgroundColor: "red",
          minHeight: "100vh",
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        <div
          style={{
            display: "flex",
            zIndex: 100,
          }}
        >
          <button onClick={handlePlayPause}>
            {state.playing ? "Pause" : "Play"}
          </button>
        </div>
        <div
          style={{
            position: "relative",
            backgroundColor: "green",
            width: 1920 / 2,
            height: 1080 / 2,
            maxWidth: 1920 / 2,
            maxHeight: 1080 / 2,
          }}
        >
          <div
            style={{
              position: "absolute",
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              border: "4px solid blue",
              zIndex: 10,
            }}
          />
          {domLoaded && (
            <>
              <ReactPlayer
                ref={playerRef}
                className="youtube-container"
                config={youtubeConfig}
                url={state.url}
                pip={state.pip}
                playing={state.playing}
                controls={state.controls}
                light={state.light}
                loop={false}
                playbackRate={state.playbackRate}
                volume={state.volume}
                muted={state.muted}
                onReady={() => console.log("onReady")}
                onStart={() => console.log("onStart")}
                onPlay={handlePlay}
                onPause={handlePause}
                onBuffer={() => console.log("onBuffer")}
                onSeek={(e) => console.log("onSeek", e)}
                onEnded={handleEnded}
                onError={(e) => console.log("onError", e)}
                onProgress={handleProgress}
                onDuration={handleDuration}
              />
              <div
                style={{
                  display: "flex",
                  width: "100%",
                }}
              >
                <code
                  style={{
                    color: "white",
                    fontSize: 20,
                    fontWeight: "bold",
                    textShadow: "0px 0px 10px black",
                    wordWrap: "break-word",
                    wordBreak: "break-all",
                  }}
                >
                  {JSON.stringify(state)}
                </code>
              </div>
            </>
          )}
        </div>
      </main>
    </>
  );
}

export async function getServerSideProps() {
  const levelData = {
    id: 1,
    title: "What does XQC say next?",
    clipId: "gHwkvZWzqyM",
    startAt: 0,
    stopAt: 5,
    continueFor: 9,
    choices: [
      {
        id: 1,
        text: "I'm a choice A",
      },
      {
        id: 2,
        text: "I'm a choice B",
      },
      {
        id: 3,
        text: "I'm a choice C",
      },
      {
        id: 4,
        text: "I'm a choice D",
      },
    ],
    answer: 1,
  } as LevelDataClass;
  return {
    props: {
      levelData,
    },
  };
}
