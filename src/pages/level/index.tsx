import { useState, useEffect, createRef } from "react";

import Head from "next/head";

import ReactPlayer, { YouTubeConfig } from "react-player/youtube";

import { Howl, Howler } from "howler";

import styles from "@/styles/Level.module.css";
import ChoiceSquare from "@/components/ChoiceSquare";

interface LevelDataClass {
  id: number;
  title: string;
  clipId: string;
  startAt: number;
  stopAt: number;
  continueFor: number;
  choices: {
    id: number;
    text: string;
    colour: string;
  }[];
  answer: number;
}

interface State {
  url: string;
  pip: boolean;
  playing: boolean;
  controls: boolean;
  light: boolean;
  volume: number;
  muted: boolean;
  played: number;
  loaded: number;
  duration: number;
  playbackRate: number;
  finished: boolean;
  hitStopAt: boolean;
  hasShownAfterChoice: boolean;
  playedSound: boolean;
}

export default function Home({ levelData }: { levelData: LevelDataClass }) {
  const playerRef = createRef<ReactPlayer>();

  const [userChoice, setUserChoice] = useState<number>(1);
  const [domLoaded, setDomLoaded] = useState(false);
  const [state, setState] = useState<State>({
    url: `https://www.youtube.com/watch?v=${levelData.clipId}`,
    pip: false,
    playing: false,
    controls: false,
    light: false,
    volume: 0.2,
    muted: false,
    played: 0,
    loaded: 0,
    duration: 0,
    playbackRate: 1.0,
    finished: false,
    hitStopAt: false,
    hasShownAfterChoice: false,
    playedSound: false,
  });

  const youtubeConfig: YouTubeConfig = {
    playerVars: {
      autohide: 0,
      showinfo: 0,
      controls: 0,
      modestbranding: 1,
      rel: 0,
      disablekb: 1,
      iv_load_policy: 3,
      start: levelData.startAt,
      cc_load_policy: 0,
      fs: 0,
      playsinline: 1,
      enablejsapi: 1,
      origin: "http://localhost:3000",
      widgetId: 1,
    },
    embedOptions: {
      autoplay: 0,
    },
    onUnstarted: () => {
      console.log("onUnstarted");
    },
  };

  useEffect(() => {
    setDomLoaded(true);
  }, []);

  const handlePlay = () => {
    console.log("onPlay");
    setState({ ...state, playing: true });
  };

  const handlePause = () => {
    console.log("onPause");
    setState({ ...state, playing: false });
  };

  const handleEnded = () => {
    console.log("onEnd");
    setState({ ...state, finished: true });
  };

  const handleProgress = (v_state: any) => {
    console.log("onProgress", v_state);

    let stateToChange: State = {
      ...state,
    };

    if (v_state.playedSeconds >= levelData.stopAt) {
      if (!state.hitStopAt) {
        console.log("onPause");
        stateToChange.playing = false;
        stateToChange.hitStopAt = true;
      } else {
        if (v_state.playedSeconds >= levelData.stopAt + levelData.continueFor) {
          // its hit the stop at and the continue to time
          console.log("showAnswer");
          stateToChange.playing = false;
          stateToChange.finished = true;
          stateToChange.hasShownAfterChoice = true;

          if (userChoice === levelData.answer) {
            // correct
            if (!state.playedSound) {
              var sound = new Howl({
                src: ["/resources/correct.mp3"],
              });
              sound.play();
            }
          } else {
            // incorrect
            if (!state.playedSound) {
              var sound = new Howl({
                src: ["/resources/incorrect.mp3"],
              });
              sound.play();
            }
          }

          stateToChange.playedSound = true;
        }
      }
    }

    stateToChange.played = v_state.playedSeconds;

    setState(stateToChange);
  };

  const handleDuration = (duration: any) => {
    console.log("onDuration", duration);
    setState({ ...state, duration });
  };

  const handlePlayPause = () => {
    setState({ ...state, playing: !state.playing });
  };

  const selectChoice = (id: number) => {
    setUserChoice(id);
  };

  const OverlayContainer = ({
    children,
    top = 0,
    right = 0,
    bottom = 0,
    left = 0,
  }: {
    children: any;
    top?: number;
    right?: number;
    bottom?: number;
    left?: number;
  }) => {
    return (
      <div
        style={{
          position: "absolute",
          top: top,
          right: right,
          left: left,
          bottom: bottom,
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          zIndex: 100,
          width: "100%",
          height: "100%",
        }}
      >
        {children}
      </div>
    );
  };

  return (
    <>
      <Head>
        <title>{levelData.title} - GuessNext</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div
          style={{
            position: "relative",
            width: 1920 / 2,
            height: 1080 / 2,
            maxWidth: 1920 / 2,
            maxHeight: 1080 / 2,
          }}
        >
          <OverlayContainer>
            {!state.playing && !state.hitStopAt && (
              <button
                className={styles.playPauseButton}
                onClick={handlePlayPause}
              >
                {state.playing ? "Pause" : "Play"}
              </button>
            )}
            {!state.playing &&
              state.hitStopAt &&
              !state.hasShownAfterChoice && (
                <>
                  {[1, 2].map((row) => {
                    return (
                      <div
                        key={"row_" + row}
                        style={{
                          width: "100%",
                          height: "100%",
                          display: "flex",
                          flexDirection: "column",
                        }}
                      >
                        {[1, 2].map((col) => {
                          const choice =
                            levelData.choices[(row - 1) * 2 + col - 1];
                          return (
                            <ChoiceSquare
                              key={"col_" + choice.id}
                              choice={choice}
                              onClick={() => selectChoice(choice.id)}
                              isSelected={userChoice === choice.id}
                            />
                          );
                        })}
                      </div>
                    );
                  })}
                  <div
                    onClick={() => {
                      console.log("submit");
                      handlePlayPause();
                    }}
                    style={{
                      position: "absolute",
                      bottom: -50,
                      right: 0,
                      backgroundColor: "black",
                      padding: 10,
                    }}
                  >
                    Submit
                  </div>
                </>
              )}
            {state.hasShownAfterChoice && (
              <div
                style={{
                  fontSize: 100,
                  color: "white",
                  fontWeight: "bold",
                  textShadow: "0px 0px 10px black",
                }}
              >
                {userChoice === levelData.answer ? "Correct" : "Incorrect"}
              </div>
            )}
            <div
              style={{
                position: "absolute",
                bottom: 0,
                right: 0,
                backgroundColor: "black",
                padding: 10,
              }}
            >
              {state.played}
            </div>
          </OverlayContainer>
          {domLoaded && (
            <ReactPlayer
              ref={playerRef}
              className="youtube-container"
              config={youtubeConfig}
              url={state.url}
              pip={state.pip}
              playing={state.playing}
              controls={state.controls}
              light={state.light}
              loop={false}
              playbackRate={state.playbackRate}
              volume={state.volume}
              muted={state.muted}
              onReady={() => console.log("onReady")}
              onStart={() => console.log("onStart")}
              onPlay={handlePlay}
              onPause={handlePause}
              onBuffer={() => console.log("onBuffer")}
              onSeek={(e) => console.log("onSeek", e)}
              onEnded={handleEnded}
              onError={(e) => console.log("onError", e)}
              onProgress={handleProgress}
              onDuration={handleDuration}
            />
          )}
        </div>
      </main>
    </>
  );
}

export async function getServerSideProps() {
  const levelData = {
    id: 1,
    title: "What does XQC say next?",
    clipId: "gHwkvZWzqyM",
    startAt: 0,
    stopAt: 6.5,
    continueFor: 7,
    answer: 1,
    choices: [
      {
        id: 1,
        text: "Poki Kills Jesse",
        colour: "#ff0000",
      },
      {
        id: 2,
        text: "Poki kills XQC",
        colour: "#0000ff",
      },
      {
        id: 3,
        text: "Poki kills self",
        colour: "#00ff00",
      },
      {
        id: 4,
        text: "Poki Misses",
        colour: "#ffff00",
      },
    ],
  } as LevelDataClass;
  return {
    props: {
      levelData,
    },
  };
}
