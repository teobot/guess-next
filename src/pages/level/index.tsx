import { useState, useEffect, createRef } from "react";

import Head from "next/head";

import ReactPlayer from "react-player/youtube";

interface LevelDataClass {
  id: number;
  title: string;
  clipId: string;
  startAt: number;
  stopAt: number;
  choices: {
    id: number;
    text: string;
  }[];
  answer: number;
}

export default function Home({ levelData }: { levelData: LevelDataClass }) {
  const [domLoaded, setDomLoaded] = useState(false);
  const playerRef = createRef<ReactPlayer>();
  const [playingPlayer, setPlayingPlayer] = useState<boolean>(false);

  useEffect(() => {
    setDomLoaded(true);
  }, []);

  const onProgress = (e: any) => {
    console.log(e);
  };

  const startVideo = () => {
    playerRef.current?.seekTo(levelData.startAt);
    setPlayingPlayer(true);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        style={{
          backgroundColor: "red",
          minHeight: "100vh",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        {domLoaded && (
          <div>
            {!playingPlayer && <button onClick={startVideo}>Start</button>}
            <div
              style={{
                pointerEvents: "none",
              }}
            >
              <ReactPlayer
                id="player"
                ref={playerRef}
                playing={playingPlayer}
                url={`https://www.youtube.com/watch?v=${levelData.clipId}`}
                controls={false}
                light={true}
                width={1920 / 2}
                height={1080 / 2}
                pip={false}
                stopOnUnmount={false}
                onProgress={onProgress}
              />
            </div>
          </div>
        )}
      </main>
    </>
  );
}

export async function getServerSideProps() {
  const levelData = {
    id: 1,
    title: "What does XQC say next?",
    clipId: "vVgw9GWNCHg",
    startAt: 0,
    stopAt: 5,
    choices: [
      {
        id: 1,
        text: "I'm a choice A",
      },
      {
        id: 2,
        text: "I'm a choice B",
      },
      {
        id: 3,
        text: "I'm a choice C",
      },
      {
        id: 4,
        text: "I'm a choice D",
      },
    ],
    answer: 1,
  } as LevelDataClass;
  return {
    props: {
      levelData,
    },
  };
}
